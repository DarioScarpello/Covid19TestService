// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Covid19TestService_Library.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Covid19TestService_API
{
    public partial class testservicescarpelloContext : DbContext
    {
        public testservicescarpelloContext()
        {
        }

        public testservicescarpelloContext(DbContextOptions<testservicescarpelloContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccessLog> AccessLog { get; set; }
        public virtual DbSet<Antigen> Antigen { get; set; }
        public virtual DbSet<Pcr> Pcr { get; set; }
        public virtual DbSet<Profile> Profile { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccessLog>(entity =>
            {
                entity.ToTable("access_log");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EntryDate).HasColumnName("entry_date");
            });

            modelBuilder.Entity<Antigen>(entity =>
            {
                entity.HasKey(e => e.Aid)
                    .HasName("antigen_pkey");

                entity.ToTable("antigen");

                entity.Property(e => e.Aid).HasColumnName("aid");

                entity.Property(e => e.Ispositive).HasColumnName("ispositive");

                entity.Property(e => e.Lines).HasColumnName("lines");

                entity.Property(e => e.Pid).HasColumnName("pid");

                entity.Property(e => e.Takenon).HasColumnName("takenon");

                entity.HasOne(d => d.PidNavigation)
                    .WithMany(p => p.Antigen)
                    .HasForeignKey(d => d.Pid)
                    .HasConstraintName("antigen_pid_fkey");
            });

            modelBuilder.Entity<Pcr>(entity =>
            {
                entity.ToTable("pcr");

                entity.Property(e => e.Pcrid).HasColumnName("pcrid");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.Ispositive).HasColumnName("ispositive");

                entity.Property(e => e.Pid).HasColumnName("pid");

                entity.Property(e => e.Takenon).HasColumnName("takenon");

                entity.HasOne(d => d.PidNavigation)
                    .WithMany(p => p.Pcr)
                    .HasForeignKey(d => d.Pid)
                    .HasConstraintName("pcr_pid_fkey");
            });

            modelBuilder.Entity<Profile>(entity =>
            {
                entity.HasKey(e => e.Pid)
                    .HasName("profile_pkey");

                entity.ToTable("profile");

                entity.Property(e => e.Pid).HasColumnName("pid");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .HasColumnName("address");

                entity.Property(e => e.City)
                    .HasMaxLength(100)
                    .HasColumnName("city");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .HasColumnName("country");

                entity.Property(e => e.Dob).HasColumnName("dob");

                entity.Property(e => e.Firstname)
                    .HasMaxLength(100)
                    .HasColumnName("firstname");

                entity.Property(e => e.Lastname)
                    .HasMaxLength(100)
                    .HasColumnName("lastname");

                entity.Property(e => e.Phonenumber).HasColumnName("phonenumber");

                entity.Property(e => e.Ssn).HasColumnName("ssn");

                entity.Property(e => e.Uid).HasColumnName("uid");

                entity.HasOne(d => d.UidNavigation)
                    .WithMany(p => p.Profile)
                    .HasForeignKey(d => d.Uid)
                    .HasConstraintName("profile_uid_fkey");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.Uid)
                    .HasName("users_pkey");

                entity.ToTable("users");

                entity.Property(e => e.Uid).HasColumnName("uid");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .HasColumnName("password");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}